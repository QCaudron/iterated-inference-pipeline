#!/usr/bin/env python

##########################################################################
#    This file is part of plom.
#
#    plom is free software: you can redistribute it and/or modify it
#    under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    plom is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    General Public License for more details.
#
#    You should have received a copy of the GNU General Public
#    License along with plom.  If not, see
#    <http://www.gnu.org/licenses/>.
#########################################################################

import json
import os
import sys
import argparse
import copy
from plom.Builder import PlomModelBuilder
from plom.Builder import archive_model

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'

def getJSON(path):

    try:
        myjson = json.load(open(path))
    except IOError:
        sys.stderr.write(FAIL + 'FAILURE! ' + ENDC + os.path.abspath(path) + ' could not be found\n')
        sys.exit(1)
    except ValueError:
        sys.stderr.write(FAIL + 'FAILURE! ' + ENDC + os.path.abspath(path) + ' could not be parsed. Go check your JSON!\n')
        sys.exit(1)
    else:
        return myjson


def main():
    parser = argparse.ArgumentParser(description='pmbuilder: build a model for json files')

    ##fixed arguments
    parser.add_argument('context_file', nargs='?', help='context (.json)')
    parser.add_argument('process_file',   nargs='?', help='process (.json)')
    parser.add_argument('link_file',    nargs='?', help='link (.json)')

    ##specifying the output
    parser.add_argument('-o', '--output', action="store", default=None, help='Path of the created element')

    ##generating model
    parser.add_argument('-s', '--simul',  action="store_true", default=False,   help='Compile only simulation methods')
    parser.add_argument('-i', '--input',  action="store",      default='files', help='Input type (used for the webApp)')
    parser.add_argument('-z', '--zip',    action="store_true", default=False,   help='tar.gz the created model')


    mycli = parser.parse_args()

    ##############################################
    ##Generating model (input from files or stdin)
    ##############################################

    if mycli.input == 'files':

        if not (mycli.context_file and mycli.process_file and mycli.link_file):
            sys.stderr.write(FAIL + 'FAILURE! ' + ENDC + 'To create a model plom needs 3 JSON files (plom context.json process.json link.json otherwise see plom --help\n')
            sys.exit(1)

        c = getJSON(mycli.context_file)
        p = getJSON(mycli.process_file)
        l = getJSON(mycli.link_file)

        ##sanitize path data in context: if not absolute path relative path from context file
        for x in c.get('data', []):
            if not os.path.isabs(x['source']):
                x['source'] = os.path.join(os.path.dirname(os.path.abspath(mycli.context_file)), x['source'])


    elif mycli.input == 'stdin': #get **one** JSON object containing context model and link objects (used by node.js)
        cpl = raw_input()
        cpl = json.loads(cpl)

        c = cpl['context']
        p = cpl['process']
        l = cpl['link']

    path_rendered = os.path.abspath(mycli.output) if mycli.output else os.path.join(os.getcwd(), 'my_plom_model')

    model = PlomModelBuilder(path_rendered, c, p, l)

    print('preparing model...')
    model.prepare()
    print(OKBLUE + "model ready" + ENDC)
    print('coding model...')
    model.code()
    print(OKBLUE + "model coded" + ENDC)

    if not model.data:
        print(WARNING + "WARNING: " + ENDC + "No data: only simulation methods will be compiled")
        mycli.simul = True

    print("compiling")

    model.compile(simulation_only=mycli.simul)
    print(OKBLUE + "model compiled" + ENDC)
    print('writting settings...')
    model.write_settings()
    print(OKBLUE + "settings written" + ENDC)

    print(OKGREEN + 'Successfully created!' + ENDC + ' in {0}'.format(path_rendered))

    if mycli.zip:
        archive_model(path_rendered, True)


if __name__ == '__main__':
    main()
